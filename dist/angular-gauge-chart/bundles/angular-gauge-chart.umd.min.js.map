{"version":3,"sources":["ng://angular-gauge-chart/lib/gauge-chart.component.ts","ng://angular-gauge-chart/lib/gauge-chart.component.html","ng://angular-gauge-chart/lib/gauge-chart.module.ts"],"names":["GaugeChartComponent","prototype","ngOnInit","this","name","nameFont","Math","round","canvasWidth","nameMargin","bottomLabel","bottomLabelFont","customBottomLabelMargin","bottomLabelMargin","customDisplayLabel","optionsCheck","element","gaugeArea","nativeElement","drawChart","oldOptions","JSON","parse","stringify","options","console","warn","canvasHeight","needleValue","centralLabel","ngDoCheck","areEqual","obj1","obj2","redraw","gaugeChart","removeGauge","GaugeChart.gaugeChart","updateNeedle","ngOnChanges","changes","firstChange","currentValue","selectors","viewQuery","rf","ctx","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵelement","i0.ɵɵstyleProp","i0.ɵɵadvance","i0.ɵɵtextInterpolate1","CircularGaugeChartModule","imports","declarations","exports"],"mappings":"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","sourcesContent":["/**\n * Angular 2 decorators and services\n */\nimport {\n  Component,\n  Input,\n  OnChanges,\n  OnInit,\n  ViewChild,\n  DoCheck,\n} from '@angular/core'\nimport * as GaugeChart from 'gauge-chart'\n\n/**\n * GaugeChart Component\n */\n@Component({\n  selector: 'circular-gauge-chart',\n  templateUrl: './gauge-chart.component.html',\n  styleUrls: ['./gauge-chart.component.css'],\n})\nexport class GaugeChartComponent implements OnInit, OnChanges, DoCheck {\n  @ViewChild('gaugeArea', { static: true }) gaugeArea\n\n  @Input() canvasWidth: number\n  @Input() canvasHeight: number\n  @Input() needleValue: number\n  @Input() centralLabel: string\n  @Input() options\n  @Input() wrapOptions?\n  @Input() name?: string\n  @Input() nameFont?: string\n  @Input() bottomLabel?: string\n  @Input() customDisplayLabel?: string\n  @Input() bottomLabelFont?: string\n  @Input() customBottomLabelMargin?: string\n\n  public nameMargin: string\n  public bottomLabelMargin: string\n\n  private element\n  private gaugeChart: any\n  private oldOptions\n\n  ngOnInit() {\n    // calculate styles for name and bottomLabel\n    if (this.name) {\n      if (!this.nameFont) {\n        this.nameFont = '' + Math.round(this.canvasWidth / 15)\n      }\n      this.nameMargin = '' + Math.round(+this.nameFont / 4)\n    }\n\n    if (this.bottomLabel) {\n      if (!this.bottomLabelFont) {\n        this.bottomLabelFont = '' + Math.round(this.canvasWidth / 10)\n      }\n      if (!this.customBottomLabelMargin) {\n        this.bottomLabelMargin = '-' + this.bottomLabelFont\n      } else {\n        this.bottomLabelMargin = this.customBottomLabelMargin\n      }\n      if (!this.customDisplayLabel) {\n        this.customDisplayLabel = 'block'\n      }\n    }\n\n    if (this.optionsCheck()) {\n      this.element = this.gaugeArea.nativeElement\n      this.drawChart()\n    }\n    this.oldOptions = JSON.parse(JSON.stringify(this.options))\n  }\n\n  optionsCheck() {\n    if (this.canvasWidth == null) {\n      console.warn('gauge-chart warning: canvasWidth is not specified!')\n      return false\n    }\n    if (this.canvasHeight == null) {\n      console.warn('gauge-chart warning: canvasWidth is not specified!')\n      return false\n    } else if (this.needleValue == null) {\n      console.warn('gauge-chart warning: needleValue is not specified!')\n      return false\n    }\n    if (this.centralLabel == null) {\n      this.centralLabel = ''\n    }\n    this.canvasHeight += 10\n    return true\n  }\n\n  ngDoCheck() {\n    if (!this.areEqual(this.options, this.oldOptions)) {\n      this.drawChart(true)\n      this.oldOptions = JSON.parse(JSON.stringify(this.options))\n    }\n  }\n\n  areEqual(obj1, obj2) {\n    return JSON.stringify(obj1) === JSON.stringify(obj2)\n  }\n\n  drawChart(redraw = false) {\n    if (redraw) {\n      this.gaugeChart.removeGauge()\n    }\n    this.options.centralLabel = this.centralLabel\n    this.gaugeChart = GaugeChart.gaugeChart(\n      this.element,\n      this.canvasWidth,\n      this.options,\n    )\n    this.gaugeChart.updateNeedle(this.needleValue)\n  }\n\n  ngOnChanges(changes) {\n    if (changes.needleValue && !changes.needleValue.firstChange) {\n      this.needleValue = changes.needleValue.currentValue\n      this.gaugeChart.updateNeedle(this.needleValue)\n    }\n    if (changes.centralLabel && !changes.centralLabel.firstChange) {\n      this.centralLabel = changes.centralLabel.currentValue\n      this.drawChart(true)\n    }\n  }\n}\n","<div class=\"gauge-chart\"\n     [style.width.px]=\"canvasWidth\"\n     [style.height.px]=\"canvasHeight\"\n>\n  <span\n    [style.font-size.px]=\"nameFont\"\n    [style.margin-bottom.px]=\"nameMargin\">\n    {{name}}\n  </span>\n  <div #gaugeArea></div>\n  <span\n    class=\"gauge-chart__label\"\n    [style.display]=\"customDisplayLabel\"\n    [style.font-size.px]=\"bottomLabelFont\"\n    [style.margin-top.px]=\"bottomLabelMargin\">\n    {{bottomLabel}}\n  </span>\n</div>\n","import { NgModule } from '@angular/core'\nimport { GaugeChartComponent } from './gauge-chart.component'\n\n@NgModule({\n  imports: [],\n  declarations: [GaugeChartComponent],\n  exports: [GaugeChartComponent],\n})\nexport class CircularGaugeChartModule {}\n"]}